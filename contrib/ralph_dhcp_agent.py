#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import argparse
import urllib2
import fcntl
import errno
import time
import subprocess
import logging
import datetime
import re


DHCP_CONF_FILE = '' # put here path to your DHCP configuration file
DHCP_SERVICE_NAME = '' # put here your DHCP service name
LOG_FORMAT = '%(levelname)s\t%(asctime).19s %(filename)s:%(lineno)d\t%(message)s'


class SimpleDHCPManager(object):
    def __init__(self, ralph_url, ralph_api_username, ralph_api_key,
                 log_path=None):
        if ralph_url.endswith('/'):
            self.ralph_url = ralph_url[:-1]
        else:
            self.ralph_url = ralph_url
        self.ralph_api_username = ralph_api_username
        self.ralph_api_key = ralph_api_key
        self.log_path = log_path
        if self.log_path:
            logging.basicConfig(format=LOG_FORMAT, filename=self.log_path,
                                level=logging.INFO)

    def _get_configuration(self):
        url = "%s/dhcp-config/?username=%s&api_key=%s" % (self.ralph_url,
                                                          self.ralph_api_username,
                                                          self.ralph_api_key)
        req = urllib2.Request(url)
        try:
            resp = urllib2.urlopen(req)
        except urllib2.URLError, e:
            if self.log_path:
                logging.error('Could not get configuration from Ralph. Error '\
                              'message: %s' % e)
            return None
        return resp.read()

    def _parse_configuration(self, config):
        if not config:
            return False
        config = config.strip()
        start_str = '# DHCP config generated at'
        stop_str = '# End of autogenerated config'
        return config.startswith(start_str) and config.endswith(stop_str)

    def _restart_dhcp_server(self):
        command = ['service', DHCP_SERVICE_NAME, 'restart']
        proc = subprocess.Popen(command, stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)
        proc.wait()
        return proc.returncode == 0

    def _set_new_configuration(self, config):
        try:
            f = open(DHCP_CONF_FILE, 'w')
            try:
                f.write(config)
            finally:
                f.close()
        except IOError, e:
            if self.log_path:
                logging.error('Could not write new DHCP configuration. Error '\
                              'message: %s' % e)
            return False
        return self._restart_dhcp_server()

    def _send_confirm(self):
        url = "%s/dhcp-synch/?username=%s&api_key=%s" % (self.ralph_url,
                                                        self.ralph_api_username,
                                                        self.ralph_api_key)
        req = urllib2.Request(url)
        try:
            resp = urllib2.urlopen(req)
        except urllib2.URLError, e:
            if self.log_path:
                logging.error('Could not send confirmation to Ralph. Error '\
                              'message: %s' % e)
            return False
        return True

    def _get_time_from_config(self, config_part):
        regex = r'#.+at ([0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2})'
        m = re.match(regex, config_part)
        if m:
            return m.group(1)
        return None

    def _should_change_configuration(self, config):
        try:
            f = open(DHCP_CONF_FILE)
            try:
                current_config_header = f.readline()
            finally:
                f.close()
        except IOError, e:
            if self.log_path:
                logging.error('Could not read current confirmation. Error '\
                              'message: %s' % e)
            return False
        current_conf_date = self._get_time_from_config(current_config_header)
        new_conf_date = self._get_time_from_config(config)
        return current_conf_date < new_conf_date

    def update_configuration(self):
        config = self._get_configuration()
        if self._parse_configuration(config):
            if not self._should_change_configuration(config):
                return True
            if self._set_new_configuration(config):
                return self._send_confirm()
        return False


def _get_cmd_options():
    args_parser = argparse.ArgumentParser(
        description='Update configuration in DHCP server.')
    args_parser.add_argument('ralph_url', help='Ralph instance address.')
    args_parser.add_argument('ralph_api_username', help='Ralph API username.')
    args_parser.add_argument('ralph_api_key', help='Ralph API key.')
    args_parser.add_argument('-l', '--log_path', help='Path to log file.')
    return vars(args_parser.parse_args())


if __name__ == "__main__":
    f = open('/tmp/%s.lock' % sys.argv[0], 'w')
    try:
        fcntl.lockf(f, fcntl.LOCK_EX | fcntl.LOCK_NB)
    except IOError, e:
        if e.errno == errno.EAGAIN:
            sys.stderr.write('[%s] Script already running.\n' % time.strftime('%c'))
            sys.exit(-1)
        raise
    args = _get_cmd_options()
    sdm = SimpleDHCPManager(**args)
    if not sdm.update_configuration():
        sys.exit(1)
