import logging

from ddt import data, ddt, unpack
from dhcp_agent import DHCPConfigManager, MODE_ENTRIES, MODE_NETWORKS
from django.contrib.auth import get_user_model
from django.test import LiveServerTestCase

from ralph.data_center.tests.factories import DataCenterFactory
from ralph.dhcp.models import DHCPServer

logger = logging.getLogger(__file__)


default_params = {
    'dhcp_config_entries': None,
    'verbose': False,
    'proto': 'http',
    'log_path': 'STDOUT',
    'restart': None,
    'host': None,
    'dhcp_config_networks': None,
    'mode': 'entries',
    'key': None,
    'dhcp_service_name': 'isc-dhcp-server',
    'dc': None,
    'net_env': None
}


@ddt
class DHCPAgentTest(LiveServerTestCase):
    def setUp(self):
        self.user = get_user_model().objects.create_superuser(
            'test', 'test@test.test', 'test'
        )
        self.default_params = default_params.copy()
        proto, host = self.live_server_url.split('://')
        self.default_params.update({
            'proto': proto,
            'host': host,
            'key': self.user.auth_token.key
        })

    @unpack
    @data(
        ({'dcs': ['fake-404', 'fake-dc'], 'envs': None},),
        ({'dcs': None, 'envs': ['fake-env']},),
    )
    def test_get_configuration_should_return_false_when_dc_or_env_doesnt_exist(
        self, request_params
    ):
        manager = DHCPConfigManager(logger, **self.default_params)
        params = manager.get_request_params(**request_params)
        self.assertEqual(
            manager._get_configuration(mode=MODE_ENTRIES, params=params),
            False
        )

    @unpack
    @data(
        (MODE_ENTRIES,),
        (MODE_NETWORKS,),
    )
    def test_get_configuration_should_return_configuration(self, mode):
        dc = DataCenterFactory()
        request_params = {
            'dcs': [dc.name],
            'envs': None
        }
        manager = DHCPConfigManager(logger, **self.default_params)
        params = manager.get_request_params(**request_params)
        data = manager._get_configuration(mode=mode, params=params)
        self.assertTrue('config generated by Ralph' in data.decode())

    def test_agent_should_send_confirmation(self):
        dc = DataCenterFactory()
        dhcp_server = DHCPServer.objects.create(
            ip='127.0.0.1', last_synchronized=None
        )
        manager = DHCPConfigManager(logger, **self.default_params)
        manager._send_confirmation()
        dhcp_server.refresh_from_db()
        self.assertTrue(dhcp_server.last_synchronized)
